from rich.console import Console
from rich.progress import Progress, BarColumn, TimeRemainingColumn
from rich.table import Table
from rich.panel import Panel
from rich.markdown import Markdown
import pandas as pd
import time

# Inicializar la consola Rich
console = Console()

# Ruta del archivo CSV
archivo = "continents2.csv"

# Mostrar t√≠tulo inicial
console.rule("[bold blue]üåç An√°lisis de Pa√≠ses y Regiones - Rich & Python[/bold blue]")

# Leer el archivo con barra de progreso
with Progress(
    "[progress.description]{task.description}",
    BarColumn(),
    "[progress.percentage]{task.percentage:>3.0f}%",
    TimeRemainingColumn(),
    console=console,
) as progress:
    tarea = progress.add_task("[cyan]Cargando archivo CSV...", total=100)

    # Simular progreso (solo est√©tico)
    for i in range(0, 100, 10):
        time.sleep(0.1)
        progress.update(tarea, advance=10)

# Leer los datos reales
df = pd.read_csv(archivo)

# Limpiar nombres de columnas (por si hay espacios)
df.columns = df.columns.str.strip().str.lower()

# Mostrar tama√±o de datos
console.print(f"\n[bold green]‚úî Archivo cargado correctamente.[/bold green]")
console.print(f"Total de registros: [bold yellow]{len(df)}[/bold yellow]\n")

# =====================
#  AN√ÅLISIS DE DATOS
# =====================

# Total de pa√≠ses por regi√≥n (continente)
countries_by_region = df['region'].value_counts()

# Subregiones m√°s comuness
top_subregions = df['sub-region'].value_counts().head(5)

# Cantidad de subregiones √∫nicas por continente
subregions_per_region = (
    df.groupby('region')['sub-region'].nunique().sort_values(ascending=False)
)

# =====================
# MOSTRAR RESULTADOS
# =====================

# Mostrar resumen general en Markdown
summary_md = Markdown(f"""
# üåé Resumen del An√°lisis Geogr√°fico
                      
**Total de pa√≠ses:** {len(df)}

**Continente con m√°s pa√≠ses:** {countries_by_region.idxmax()}  
**N√∫mero de pa√≠ses en ese continente:** {countries_by_region.max()}

**Subregi√≥n m√°s com√∫n:** {top_subregions.index[0]}  
**Cantidad de subregiones distintas:** {df['sub-region'].nunique()}
""")

console.print(
    Panel(summary_md, 
          title="[bold magenta]Resumen General[/bold magenta]",
          border_style="bright_magenta")
)

# Crear tabla de pa√≠ses por regi√≥n
table_region = Table(title="üåç Pa√≠ses por Regi√≥n (Continente)")
table_region.add_column("Regi√≥n", justify="left", style="cyan")
table_region.add_column("Cantidad de Pa√≠ses", justify="right", style="bold yellow")

for region, count in countries_by_region.items():
    table_region.add_row(region, str(count))

console.print(table_region)


# Crear tabla de subregiones m√°s comunes
table_sub = Table(title="üìå Subregiones M√°s Frecuentes")
table_sub.add_column("Subregion", justify="left", style="green")
table_sub.add_column("Countries", justify="right", style="yellow")

for subregion, count in top_subregions.items():
    table_sub.add_row(subregion, str(count))

console.print(table_sub)

# Mostrar panel adicional con an√°lisis

panel_extra = Panel(
    f"[bold blue]Continente con mayor diversidad de subregiones:[/bold blue] {subregions_per_region.index[0]}\n"
    f"[bold blue]Cantidad de subregiones √∫nicas:[/bold blue] {subregions_per_region.max()}",
    title="[bold green]üåê An√°lisis Complementario[/bold green]",
    border_style="bright_blue"
)
console.print(panel_extra)
console.rule("[bold magenta]Fin del An√°lisis[/bold magenta]")
